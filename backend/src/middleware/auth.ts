import { Request, Response, NextFunction } from 'express'
import UserModel from '../models/UserModel'
import JWTBlacklistModel from '../models/JWTBlacklistModel'

/**
 * MIDDLEWARE DE AUTENTICA√á√ÉO JWT
 * 
 * Funcionalidades:
 * - Extra√ß√£o e valida√ß√£o de tokens JWT
 * - Verifica√ß√£o de blacklist
 * - Verifica√ß√£o de expira√ß√£o
 * - Inje√ß√£o de dados do usu√°rio na request
 * - Tratamento de erros padronizado
 */

export interface AuthenticatedRequest extends Request {
  user?: {
    id: string
    email: string
    name: string
    email_verified: boolean
  }
  token?: string
}

/**
 * MIDDLEWARE PRINCIPAL - Autentica√ß√£o obrigat√≥ria
 * Usado em rotas que requerem autentica√ß√£o
 */
export const authenticateToken = async (
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    const token = extractTokenFromHeader(req)
    
    if (!token) {
      res.status(401).json({
        success: false,
        error: 'Token de acesso √© obrigat√≥rio',
        code: 'MISSING_TOKEN'
      })
      return
    }

    // Verificar se o token est√° na blacklist
    const isBlacklisted = await JWTBlacklistModel.isBlacklisted(token)
    if (isBlacklisted) {
      res.status(401).json({
        success: false,
        error: 'Token inv√°lido ou revogado',
        code: 'TOKEN_BLACKLISTED'
      })
      return
    }

    // Verificar validade do token
    const tokenPayload = UserModel.verifyAccessToken(token)
    if (!tokenPayload) {
      res.status(401).json({
        success: false,
        error: 'Token inv√°lido ou expirado',
        code: 'INVALID_TOKEN'
      })
      return
    }

    // Verificar se o usu√°rio ainda existe
    const user = await UserModel.findById(tokenPayload.id)
    if (!user) {
      res.status(401).json({
        success: false,
        error: 'Usu√°rio n√£o encontrado',
        code: 'USER_NOT_FOUND'
      })
      return
    }

    // Injetar dados do usu√°rio na request
    req.user = {
      id: user.id,
      email: user.email,
      name: user.name,
      email_verified: user.email_verified
    }
    req.token = token

    console.log(`üîê [Auth] Usu√°rio autenticado: ${user.email}`)
    next()

  } catch (error: any) {
    console.error('‚ùå [Auth Middleware] Erro:', error.message)
    res.status(500).json({
      success: false,
      error: 'Erro interno de autentica√ß√£o',
      code: 'AUTH_INTERNAL_ERROR'
    })
  }
}

/**
 * MIDDLEWARE OPCIONAL - Autentica√ß√£o n√£o obrigat√≥ria
 * Usado em rotas que podem funcionar com ou sem autentica√ß√£o
 */
export const optionalAuth = async (
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    const token = extractTokenFromHeader(req)
    
    if (!token) {
      // Sem token, continuar sem autentica√ß√£o
      next()
      return
    }

    // Verificar se o token est√° na blacklist
    const isBlacklisted = await JWTBlacklistModel.isBlacklisted(token)
    if (isBlacklisted) {
      // Token inv√°lido, continuar sem autentica√ß√£o
      next()
      return
    }

    // Verificar validade do token
    const tokenPayload = UserModel.verifyAccessToken(token)
    if (!tokenPayload) {
      // Token inv√°lido, continuar sem autentica√ß√£o
      next()
      return
    }

    // Verificar se o usu√°rio ainda existe
    const user = await UserModel.findById(tokenPayload.id)
    if (!user) {
      // Usu√°rio n√£o existe, continuar sem autentica√ß√£o
      next()
      return
    }

    // Injetar dados do usu√°rio na request se v√°lido
    req.user = {
      id: user.id,
      email: user.email,
      name: user.name,
      email_verified: user.email_verified
    }
    req.token = token

    console.log(`üîê [Optional Auth] Usu√°rio autenticado: ${user.email}`)
    next()

  } catch (error: any) {
    console.error('‚ö†Ô∏è [Optional Auth] Erro ignorado:', error.message)
    // Em caso de erro, continuar sem autentica√ß√£o
    next()
  }
}

/**
 * MIDDLEWARE DE VERIFICA√á√ÉO DE EMAIL
 * Requer que o usu√°rio tenha o email verificado
 */
export const requireEmailVerification = (
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction
): void => {
  if (!req.user) {
    res.status(401).json({
      success: false,
      error: 'Autentica√ß√£o necess√°ria',
      code: 'NOT_AUTHENTICATED'
    })
    return
  }

  if (!req.user.email_verified) {
    res.status(403).json({
      success: false,
      error: 'Email n√£o verificado. Verifique seu email para continuar.',
      code: 'EMAIL_NOT_VERIFIED'
    })
    return
  }

  next()
}

/**
 * MIDDLEWARE VERIFY_USER - Padr√£o da documenta√ß√£o
 * Equivalente ao before_action :verify_user do Rails
 * Redireciona para p√°gina inicial se n√£o autenticado
 */
export const verifyUser = async (
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    const token = extractTokenFromHeader(req)
    
    if (!token) {
      res.status(401).json({
        success: false,
        error: 'Acesso negado. Fa√ßa login para continuar.',
        code: 'USER_NOT_AUTHENTICATED',
        redirect: '/login'
      })
      return
    }

    // Verificar se o token est√° na blacklist
    const isBlacklisted = await JWTBlacklistModel.isBlacklisted(token)
    if (isBlacklisted) {
      res.status(401).json({
        success: false,
        error: 'Sess√£o expirada. Fa√ßa login novamente.',
        code: 'TOKEN_BLACKLISTED',
        redirect: '/login'
      })
      return
    }

    // Verificar validade do token
    const tokenPayload = UserModel.verifyAccessToken(token)
    if (!tokenPayload) {
      res.status(401).json({
        success: false,
        error: 'Sess√£o inv√°lida. Fa√ßa login novamente.',
        code: 'INVALID_TOKEN',
        redirect: '/login'
      })
      return
    }

    // Verificar se o usu√°rio ainda existe
    const user = await UserModel.findById(tokenPayload.id)
    if (!user) {
      res.status(401).json({
        success: false,
        error: 'Usu√°rio n√£o encontrado. Fa√ßa login novamente.',
        code: 'USER_NOT_FOUND',
        redirect: '/login'
      })
      return
    }

    // Injetar dados do usu√°rio na request
    req.user = {
      id: user.id,
      email: user.email,
      name: user.name,
      email_verified: user.email_verified
    }
    req.token = token

    console.log(`‚úÖ [verify_user] Usu√°rio verificado: ${user.email}`)
    next()

  } catch (error: any) {
    console.error('‚ùå [verify_user] Erro:', error.message)
    res.status(500).json({
      success: false,
      error: 'Erro interno. Tente novamente.',
      code: 'VERIFY_USER_ERROR',
      redirect: '/login'
    })
  }
}

/**
 * MIDDLEWARE DE ADMIN (para implementa√ß√£o futura)
 * Requer que o usu√°rio tenha privil√©gios de administrador
 */
export const requireAdmin = async (
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    if (!req.user) {
      res.status(401).json({
        success: false,
        error: 'Autentica√ß√£o necess√°ria',
        code: 'NOT_AUTHENTICATED'
      })
      return
    }

    // Verificar se o usu√°rio √© admin
    const user = await UserModel.findById(req.user.id)
    if (!user) {
      res.status(401).json({
        success: false,
        error: 'Usu√°rio n√£o encontrado',
        code: 'USER_NOT_FOUND'
      })
      return
    }

    // Por enquanto, considerar admin apenas usu√°rios espec√≠ficos
    const adminEmails = [
      'admin@10xdev.com',
      'samuel@10xdev.com'
    ]

    if (!adminEmails.includes(user.email)) {
      res.status(403).json({
        success: false,
        error: 'Privil√©gios de administrador necess√°rios',
        code: 'ADMIN_REQUIRED'
      })
      return
    }

    console.log(`üëë [Admin Auth] Admin autenticado: ${user.email}`)
    next()

  } catch (error: any) {
    console.error('‚ùå [Admin Auth] Erro:', error.message)
    res.status(500).json({
      success: false,
      error: 'Erro interno de autentica√ß√£o',
      code: 'AUTH_INTERNAL_ERROR'
    })
  }
}

/**
 * MIDDLEWARE DE RATE LIMITING PARA AUTENTICA√á√ÉO
 * Implementa rate limiting espec√≠fico para endpoints de auth
 */
export const authRateLimit = (maxAttempts: number = 5) => {
  const attempts = new Map<string, { count: number, resetTime: number }>()
  const WINDOW_MS = 15 * 60 * 1000 // 15 minutos

  return (req: Request, res: Response, next: NextFunction): void => {
    const clientIP = req.ip || req.connection.remoteAddress || 'unknown'
    const now = Date.now()

    // Limpar entradas expiradas
    for (const [ip, data] of attempts.entries()) {
      if (now > data.resetTime) {
        attempts.delete(ip)
      }
    }

    // Verificar tentativas do cliente atual
    const clientAttempts = attempts.get(clientIP)
    
    if (!clientAttempts) {
      // Primeira tentativa
      attempts.set(clientIP, {
        count: 1,
        resetTime: now + WINDOW_MS
      })
    } else {
      // Verificar se excedeu o limite
      if (clientAttempts.count >= maxAttempts) {
        const remainingTime = Math.ceil((clientAttempts.resetTime - now) / 1000 / 60)
        res.status(429).json({
          success: false,
          error: `Muitas tentativas. Tente novamente em ${remainingTime} minutos.`,
          code: 'RATE_LIMIT_EXCEEDED',
          retryAfter: remainingTime
        })
        return
      }

      // Incrementar contador
      clientAttempts.count++
    }

    next()
  }
}

/**
 * UTILIT√ÅRIOS
 */

/**
 * Extrai token do header Authorization
 */
function extractTokenFromHeader(req: Request): string | null {
  const authHeader = req.headers.authorization
  
  if (!authHeader) {
    return null
  }

  // Formato esperado: "Bearer TOKEN"
  if (!authHeader.startsWith('Bearer ')) {
    return null
  }

  const token = authHeader.substring(7) // Remove "Bearer "
  return token.trim() || null
}

/**
 * Middleware para log de tentativas de autentica√ß√£o
 */
export const logAuthAttempt = (req: Request, res: Response, next: NextFunction): void => {
  const originalSend = res.json

  res.json = function(data: any) {
    const clientIP = req.ip || 'unknown'
    const userAgent = req.get('User-Agent') || 'unknown'
    const endpoint = req.path
    const method = req.method
    const success = data?.success || false

    console.log(`üîç [Auth Log] ${method} ${endpoint} - IP: ${clientIP} - Success: ${success} - UA: ${userAgent}`)

    return originalSend.call(this, data)
  }

  next()
}

export default {
  authenticateToken,
  optionalAuth,
  requireEmailVerification,
  verifyUser,
  requireAdmin,
  authRateLimit,
  logAuthAttempt
}